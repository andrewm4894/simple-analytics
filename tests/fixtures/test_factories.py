"""
Test factories for creating test data using factory_boy
"""

from django.contrib.auth.models import User
from django.utils import timezone

import factory
from faker import Faker

from events.models import Event
from projects.models import EventSource, Project

fake = Faker()


class UserFactory(factory.django.DjangoModelFactory):
    """Factory for Django User model"""

    class Meta:
        model = User

    username = factory.Sequence(lambda n: f"testuser{n}")
    email = factory.LazyAttribute(lambda obj: f"{obj.username}@example.com")
    first_name = factory.Faker("first_name")
    last_name = factory.Faker("last_name")
    is_active = True
    is_staff = False
    is_superuser = False


class ProjectFactory(factory.django.DjangoModelFactory):
    """Factory for Project model"""

    class Meta:
        model = Project

    name = factory.Faker("company")
    description = factory.Faker("text", max_nb_chars=200)
    owner = factory.SubFactory(UserFactory)

    # API keys will be auto-generated by the model
    # Settings with reasonable defaults
    rate_limit_per_minute = 1000
    retention_days = 90
    aggregation_retention_days = 365
    cors_allowed_origins = factory.LazyFunction(lambda: ["*"])

    # Sampling settings
    sampling_enabled = False
    sampling_rate = 1.0
    sampling_strategy = "random"

    is_active = True


class EventSourceFactory(factory.django.DjangoModelFactory):
    """Factory for EventSource model"""

    class Meta:
        model = EventSource

    project = factory.SubFactory(ProjectFactory)
    name = factory.Faker("word")
    description = factory.Faker("text", max_nb_chars=100)
    is_active = True

    # Source-specific settings (None = inherit from project)
    sampling_enabled = None
    sampling_rate = None
    sampling_strategy = None


class EventFactory(factory.django.DjangoModelFactory):
    """Factory for Event model"""

    class Meta:
        model = Event

    project = factory.SubFactory(ProjectFactory)
    event_source = factory.SubFactory(EventSourceFactory)
    event_name = factory.Faker("word")
    user_id = factory.Faker("uuid4")
    session_id = factory.LazyAttribute(lambda obj: f"sess_{fake.uuid4()[:16]}")
    ip_address = factory.Faker("ipv4")
    user_agent = factory.Faker(
        "user_agent"
    )  # Note: Faker doesn't have user_agent by default
    timestamp = factory.LazyFunction(timezone.now)

    @factory.lazy_attribute
    def event_properties(self):
        """Generate realistic event properties"""
        return {
            "page": fake.uri_path(),
            "referrer": fake.uri(),
            "browser": fake.random_element(
                elements=["Chrome", "Firefox", "Safari", "Edge"]
            ),
            "device_type": fake.random_element(
                elements=["desktop", "mobile", "tablet"]
            ),
            "custom_data": {
                "feature": fake.word(),
                "value": fake.random_int(min=1, max=1000),
            },
        }


# Specialized factories for testing
class MobileEventFactory(EventFactory):
    """Factory for mobile events"""

    @factory.lazy_attribute
    def event_properties(self):
        return {
            "device_type": "mobile",
            "app_version": "1.2.3",
            "os": fake.random_element(elements=["iOS", "Android"]),
            "screen_size": "375x667",
        }


class WebEventFactory(EventFactory):
    """Factory for web events"""

    @factory.lazy_attribute
    def event_properties(self):
        return {
            "device_type": "desktop",
            "page": fake.uri_path(),
            "referrer": fake.uri(),
            "viewport": "1920x1080",
            "browser": fake.random_element(
                elements=["Chrome", "Firefox", "Safari", "Edge"]
            ),
        }


class SamplingProjectFactory(ProjectFactory):
    """Factory for projects with sampling enabled"""

    sampling_enabled = True
    sampling_rate = 0.5  # 50% sampling
    sampling_strategy = "random"


class DeterministicSamplingProjectFactory(ProjectFactory):
    """Factory for projects with deterministic sampling"""

    sampling_enabled = True
    sampling_rate = 0.3  # 30% sampling
    sampling_strategy = "deterministic"
